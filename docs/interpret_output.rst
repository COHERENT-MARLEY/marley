=======================
Interpreting the output
=======================

This page provides a guide to the contents of the output files produced by the
``marley`` executable. Following a brief description of the *PDG codes* used to
identify particle types in MARLEY, documentation for all four available output
formats is given below.

PDG codes
^^^^^^^^^

The `Particle Data Group <http://pdg.lbl.gov/index.html>`__ (PDG) has defined a
standard numbering scheme for representing particle species in Monte Carlo
event generators. Each kind of particle is assigned a unique positive integer
as an identifier. The corresponding antiparticle is assigned a negative integer
with the same absolute value. A full description of the numbering scheme is
available `here <http://pdg.lbl.gov/current/mc-particle-id>`__. 

Like nearly all modern particle physics generators, MARLEY adopts the integer
*PDG codes* for particle identification and uses them both internally and in
output files. For convenience, a table of the PDG codes most relevant for
MARLEY is given below.

.. raw:: html
   
     <head>
     <style>
       table.mytable {
         border-collapse: separate;
         border-spacing: 0 5px;
       }
       table.mytable th, td {
         text-align: center;
       }
     </style>
     </head>

   <table align="center" style="width:30%" class="mytable">

     <tr>
       <th>PDG code</th>
       <th>Particle</th>
     </tr>

     <tr>
       <td>11</td>
       <td>e<sup>&minus;</sup></td>
     </tr>

     <tr>
       <td>12</td>
       <td>&nu;<sub>e</sub></td>
     </tr>

     <tr>
       <td>13</td>
       <td>&mu;<sup>&minus;</sup></td>
     </tr>

     <tr>
       <td>14</td>
       <td>&nu;<sub>&mu;</sub></td>
     </tr>

     <tr>
       <td>15</td>
       <td>&tau;<sup>&minus;</sup></td>
     </tr>

     <tr>
       <td>16</td>
       <td>&nu;<sub>&tau;</sub></td>
     </tr>

     <tr>
       <td>22</td>
       <td>&gamma;</td>
     </tr>

     <tr>
       <td>2112</td>
       <td>n</td>
     </tr>

     <tr>
       <td>2212</td>
       <td>p</td>
     </tr>

     <tr>
       <td>1000010020</td>
       <td>d</td>
     </tr>

     <tr>
       <td>1000010030</td>
       <td>t</td>
     </tr>

     <tr>
       <td>1000020030</td>
       <td>h</td>
     </tr>


     <tr>
       <td>1000020040</td>
       <td>&alpha;</td>
     </tr>

  </table>

In general, a PDG code of the form 100ZZZAAA0 represents a nuclide with proton
number Z and mass number A. For example, :superscript:`40`\Ar is represented by
the PDG code 1000180400.

Output file formats
^^^^^^^^^^^^^^^^^^^

The neutrino scattering events generated by the ``marley`` executable may be
saved to disk in four distinct output formats. Descriptions of each of these
formats are given below.

ASCII
-----

The ASCII format is MARLEY's native text-based format for event input and
output. It is produced and parsed by applying the stream insertion (``<<``) and
extraction (``>>``) operators, respectively, to the ``marley::Event`` class in
the C++ source code.

An ASCII-format output file begins with the line
::

  FluxAvgXSec

.. |InverseMeVSquared| raw:: html

   MeV<sup> &minus;2</sup>

where ``FluxAvgXSec`` is the flux-averaged total cross section in natural units
(|InverseMeVSquared| per atom). This quantity may be used together with the
events themselves to compute differential cross sections.

.. todo::
   Cite paper

One or more event records appear in the remainder of the output file. Each
event record begins with a header of the form

::

  Ni Nf Ex twoJ P

where ``Ni`` (``Nf``) is the number of particles in the initial (final) state.
The three remaining fields in the event header report properties of the
final-state nucleus following the primary scattering reaction but before
de-excitations. The ``Ex`` field gives the nuclear excitation energy (MeV),
``twoJ`` gives the nuclear spin multiplied by two (to allow half-integer spins
to be represented by a C++ ``int``), and ``P`` is a single character
representing a positive (``+``) or negative (``-``) parity state.

On the lines following the event header, each of the particles belonging to the
event is described by a single line of the form

::

  PDG Etot Px Py Pz M Q

where ``PDG`` is the PDG code identifying the particle species and ``Etot``,
``Px``, ``Py``, and ``Pz`` are, respectively, the total energy and the x-, y-,
and z-components of the particle 3-momentum (MeV). The particle mass ``M``
(MeV) and (net) electric charge ``Q`` (in units of the elementary charge)
appear at the end of each line. The first ``Ni`` lines following the event
header describe the initial-state particles. The remaining ``Nf`` lines
describe the final-state particles and complete the event record.

.. raw:: html

   <div>
   <head><style>
   table.highlighttable {
     display: block;
     overflow-x: auto;
     white-space: nowrap;
   }
   table.highlighttable td.linenos {
     text-align: left;
   }
   table.hightlighttable td.code {
     text-align: left;
   }
   </style>
   </head><div class="highlight-none notranslate"><table class="highlighttable" id="ascii-format-example"><tr><td class="linenos"><div class="linenodiv"><pre> 1
    2
    3
    4
    5
    6
    7
    8
    9
   10
   11
   12
   13
   14</pre></div></td><td class="code"><div class="highlight" style="text-align: left;"><pre>5.98368867447267264e-19
   2 4 3.79748000000000019e+00 2 +
   12 1.00000000000000000e+01 0.00000000000000000e+00 0.00000000000000000e+00 1.00000000000000000e+01 0.00000000000000000e+00 0
   1000180400 3.72247225431518091e+04 0.00000000000000000e+00 0.00000000000000000e+00 0.00000000000000000e+00 3.72247225431518091e+04 0
   11 5.20690886815266740e+00 -4.63535385338761508e+00 1.35706546730579314e+00 -1.87687187323011373e+00 5.10998927645907708e-01 -1
   1000190400 3.72257175068044089e+04 4.98066184879143847e+00 -2.27058729207187593e+00 9.28456410767741858e+00 3.72257159465162476e+04 1
   22 1.53694352434620662e+00 -1.11400145523226901e+00 9.50751758100756628e-01 4.66119350851738223e-01 0.00000000000000000e+00 0
   22 2.26118395490673985e+00 7.68693459828445835e-01 -3.72299333346743089e-02 2.12618841470095354e+00 0.00000000000000000e+00 0
   2 3 1.03964200000000009e+01 2 +
   12 2.99304885549511290e+01 0.00000000000000000e+00 0.00000000000000000e+00 2.99304885549511290e+01 0.00000000000000000e+00 0
   1000180400 3.72247225431518091e+04 0.00000000000000000e+00 0.00000000000000000e+00 0.00000000000000000e+00 3.72247225431518091e+04 0
   11 1.85223477954320721e+01 -9.86795370224160173e+00 -1.55256312663347771e+01 -2.09630900945355991e+00 5.10998927645907708e-01 -1
   1000190390 3.62940260743929030e+04 -1.74322423197586254e+01 -4.21863040207651636e+01 5.85225771236273147e+01 3.62939501877290750e+04 1
   2112 9.42104609518426400e+02 2.73001960220002289e+01 5.77119352870999407e+01 -2.64957795592226226e+01 9.39565378653339735e+02 0
   </pre></div>
   </td></tr></table></div>
   </div>

.. |xsecValueNatural| raw:: html

   5.984&times;10<sup>&minus;19</sup>

.. |xsecValueConventional| raw:: html

   2.330&times;10<sup>&minus;40</sup> cm<sup>2</sup>

.. |40K| raw:: html

   <sup>40</sup>K

.. |40Ar| raw:: html

   <sup>40</sup>Ar

.. |39K| raw:: html

   <sup>39</sup>K

.. |nue| raw:: html

   &nu;<sub>e</sub>

.. |onePlus| raw:: html

   1<sup>&plus;</sup>

The listing above shows an example MARLEY output file in ASCII format. Line 1
gives the value of |xsecValueNatural| |InverseMeVSquared| =
|xsecValueConventional| for the flux-averaged total cross section per atom.
Line 2 gives the header for the first event, which involves a transition to the
|40K| nuclear level with an excitation energy of 3.797 MeV above the ground
state and spin-parity |onePlus|. Lines 3–4 describe the initial state: a 10-MeV
|nue| traveling in the +z direction toward a |40Ar| atom at rest. Lines 5–8
describe the final-state particles: a 5.2 MeV electron, a |40K| ion, and two
de-excitation γ-rays with energies of 1.54 and 2.26 MeV. The second and final
event in the file, which appears on lines 9–14, involves a |nue|-|40Ar|
collision which produces an electron, a |39K| ion, and a neutron.

HEPEVT
------

The legacy `HEPEVT <https://home.fnal.gov/~mrenna/lutp0613man2/node49.html>`__
format is designed for interfacing event generators with each other and with
other software. Compatibility with this event format is maintained in many
modern high energy physics software libraries. The description presented here
covers only those aspects of the HEPEVT format needed to interpret the output
of MARLEY. Further details are available on pages 327–330 of `this document
<https://doi.org/10.5170/CERN-1989-008-V-3>`__.

A HEPEVT-format output file consists of one or more text-based event records.
Each of these records begins with the header

::

  NEVHEP NHEP

where ``NEVHEP`` is the event number (untracked by MARLEY and thus always set
to zero) and ``NHEP`` is the number of particles in the event. The header is
followed by ``NHEP`` lines, each representing a single particle. These have the
format

::

  ISTHEP IDHEP JMOHEP1 JMOHEP2 JDAHEP1 JDAHEP2 PHEP1 PHEP2 PHEP3 PHEP4 PHEP5 VHEP1 VHEP2 VHEP3 VHEP4

where ``ISTHEP`` is an integer code identifying the particle status and
``IDHEP`` is the particle's PDG code. In agreement with the HEPEVT standard,
MARLEY uses status code 1 for the final-state particles and 3 for the
initial-state particles. The ``JMOHEP1``, ``JMOHEP2``, ``JDAHEP1``, and
``JDAHEP2`` entries record the indices (between 1 and ``NHEP``, inclusive) of
particles in the event record that correspond to the first mother, second
mother, first daughter, and last daughter of the current particle,
respectively. These indices are set to zero in cases where they do not apply
(e.g., a particle with no daughters will have ``JDAHEP1`` = ``JDAHEP2`` = 0).
Entries ``PHEP1`` through ``PHEP3`` record the x-, y-, and z-components of the
particle 3-momentum, while ``PHEP4`` gives the total energy and ``PHEP5`` gives
the particle mass (all in GeV). Entries ``VHEP1`` through ``VHEP3`` store the
x, y, and z positions of the particle production vertex (mm), and ``VHEP4``
gives the production time (mm/c).

Because MARLEY currently treats all nuclear de-excitations as instantaneous and
does not perform any particle tracking, ``VHEP1`` through ``VHEP4`` are always
identically zero in HEPEVT output files. Intermediate de-excitation steps are
also not currently stored in the event record, so ``JMOHEP1``, ``JMOHEP2``,
``JDAHEP1``, and ``JDAHEP2`` are also identically zero in most cases.

In addition to the initial- and final-state particles, MARLEY adds a dummy
particle with ``ISTHEP`` = 11 to each HEPEVT event record. All data fields are
zero for this particle except for (1) ``JMOHEP1``, which contains the nuclear
spin multiplied by two, (2) ``JMOHEP2``, which reports the parity of the
nucleus as an integer, (3) ``PHEP4``, which gives the excitation energy of the
nucleus (MeV), and (4) ``PHEP5``, which records the flux-averaged total cross
section in units of |InverseMeVSquared| per atom. As is the case for the
ASCII format, the excitation energy, spin, and parity values refer to the
nuclear state that is formed after the primary scattering reaction but before
any de-excitations have occurred.

.. literalinclude:: _static/example.hepevt
   :name: hepevt_format_example

The listing above shows an example MARLEY output file in HEPEVT format. The
same two events from the ASCII-format `example file <#ascii-format-example>`__
are used for easy comparison of the formats.

JSON
----

`JSON <https://json.org/json-en.html>`__ (JavaScript Object Notation) is a
text-based data-interchange format used for a wide variety of applications. The
grammar of JSON is based on two data structures. A JSON *object* is an
unordered set of key-value pairs enclosed in curly braces (``{}``). A JSON
*array* is an ordered list of values enclosed in square brackets (``[]``). Each
*key* is an arbitrary string delimited by double quotes (``""``) and separated
from its corresponding value by a colon (``:``). Each *value* may be a string,
a number, an object, an array, or one of the words (without surrounding double
quotes) ``true``, ``false``, or ``null``. Neighboring values within an array
and key-value pairs within an object are separated from each other by a comma
(``,``).

The JSON-format output files produced by MARLEY contain a single object with
two top-level keys. The ``events`` key is used to label an array of event
objects, while the ``gen_state`` key is associated with an object describing
the state of the generator at the moment that the file was created.

Each element of the ``events`` array is a JSON object containing five key-value
pairs. The first three of these, ``Ex``, ``twoJ``, and ``parity``, provide the
excitation energy (MeV), two times the total spin, and the parity of the final
nucleus after the primary interaction but before any de-excitations have taken
place. The other two keys, ``initial_particles`` and ``final_particles``, are
used store arrays of particles represented as JSON objects. Each particle
object defines the following keys:

``charge``
  The (net) electric charge (in units of the elementary charge)

``pdg``
  PDG code identifying the particle type

``E``
  Total energy

``px``
  Momentum x-component

``py``
  Momentum y-component

``pz``
  Momentum z-component

``mass``
  Mass

The particle 4-momentum components and mass are all given in natural units
(MeV).

The ``gen_state`` JSON object includes several key-value pairs. The ``config``
key refers to a JSON object which reproduces the full contents (except for
comments) of the job configuration file used to generate the events. The
``event_count``, ``flux_avg_xsec``, and ``seed`` keys label the total number of
events generated at the time the file was written, the flux-averaged total
cross section (|InverseMeVSquared| per atom), and the integer random
number seed used to initialize the event generator. A final key,
``generator_state_string``, records a string representation of the internal
state of the `std::mt19937_64
<http://www.cplusplus.com/reference/random/mt19937_64/>`__ object used by
MARLEY to obtain pseudorandom numbers.

An example JSON output file is available `here <_static/example.json>`__.
It contains the same two events as the `ASCII <#ascii-format-example>`__-
and `HEPEVT <#hepevt-format-example>`__-format examples above.

ROOT
----

If MARLEY has been built against the appropriate shared libraries from the
`ROOT <https://root.cern.ch>`__ data analysis framework (see the description of
MARLEY's installation prerequisites `here
<getting_started.html#prerequisites>`__), then output files in ROOT's
compressed binary format may also be produced.

Within a ROOT-format output file, access to the generated events is managed by
an instance of the ROOT `TTree <https://root.cern.ch/trees-five-steps>`__
class, which provides a hierarchical data structure for storing many objects
belonging to the same C++ type. In general, a ``TTree`` may own one or more
branches (represented by the ``TBranch`` class), each of which owns one or more
leaves (represented by ``TLeaf``).

The ROOT-format output files generated by MARLEY contain a single ``TTree``
called ``MARLEY_event_tree``. This ``TTree`` has a single branch called
``event`` which stores one ``marley::Event`` object per tree entry. Example
ROOT `macros <https://root.cern.ch/working-macros>`__ that demonstrate the
recommended procedure for accessing and manipulating the events stored in this
format are provided in the folder ``examples/macros/`` of the MARLEY source
code.

In order to properly interpret ``marley::Event`` objects, ROOT requires shared
libraries containing `dictionaries
<https://root.cern.ch/interacting-shared-libraries-rootcling>`__ for the MARLEY
classes to be loaded at runtime. Whenever MARLEY is successfully built against
ROOT, a helper script called ``mroot`` is installed in the ``build/`` folder.
Running this script will start the interactive ROOT C++ interpreter after
automatically loading the needed class dictionaries.

Conventions used in the event objects
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When analyzing ``marley::Event`` objects (or their alternative "flat"
representation discussed `below <#flat-root-files>`__), it is helpful to be
aware of MARLEY's nomenclature for the particles involved in each event's 2 → 2
primary interaction
|genericReaction|

Here the particles 𝑎, 𝑏, 𝑐, and 𝑑 are labeled as, respectively, the
*projectile*, *target*, *ejectile*, and *residue*. Where a mass difference
exists, MARLEY chooses the projectile (ejectile) to be the lighter of the two
particles in the initial (final) state. Otherwise, the choice is arbitrary. All
four-vector components stored in a MARLEY event record are expressed in the
laboratory frame, i.e., the rest frame of the target. If simulation of nuclear
de-excitations is enabled (as it is by default) and the residue is a nucleus,
its 4-momentum and net charge are stored in the event record after it has
reached the ground state.

Metadata
~~~~~~~~

Four pieces of metadata are saved in a ROOT-format output file alongside the
events themselves:

MARLEY_config
  A JSON-format string which stores the contents (except for comments) of the
  job configuration file used to generate the events

MARLEY_state
  A string giving the serialized internal state (obtained using the stream
  insertion operator ``<<``) of the `std::mt19937_64
  <http://www.cplusplus.com/reference/random/mt19937_64/>`__ object used to
  generate random numbers when creating the events.

MARLEY_seed
  A string representation of the integer random number seed used to initialize
  the simulation

MARLEY_flux_avg_xsec 
  A `TParameter\<double\>
  <https://root.cern/root/html528/TParameter_double_.html>`__ which stores the
  flux-averaged total cross section (|InverseMeVSquared| per atom)

"Flat" ROOT files
~~~~~~~~~~~~~~~~~

An alternative "flat" form of the ROOT output format is also available which
may be analyzed without the need for the MARLEY class dictionaries. An output
file containing MARLEY events in any of the four standard formats may be
converted into a "flat" ROOT file using the ``marsum`` utility. After sourcing
the `setup_marley.sh
<getting_started.html#setting-up-the-runtime-environment>`__ script, one may
convert the MARLEY output file ``OLD_EVENTS_FILE`` into a new "flat" ROOT file,
``new_flat_file.root``, via the command

::

  marsum new_flat_file.root OLD_EVENTS_FILE

.. |doubleType| raw:: html

   <i style="font-weight: normal;">(double)</i>

.. |intType| raw:: html

   <i style="font-weight: normal;">(int)</i>

.. |doubleArrayType| raw:: html

   <i style="font-weight: normal;">(double[np])</i>

.. |intArrayType| raw:: html

   <i style="font-weight: normal;">(int[np])</i>

.. |sumTree| raw:: html

   <u>M</u>ARLEY <u>s</u>ummary <u>t</u>ree


The new file will contain
a single ROOT ``TTree`` called ``mst``
(for |sumTree|) with the following branches:

.. Projectile

pdgv |intType|
  Projectile PDG code

Ev |doubleType|
  Projectile total energy (MeV)

KEv |doubleType|
  Projectile kinetic energy (MeV)

pxv |doubleType|
  Projectile 3-momentum x-component (MeV)

pyv |doubleType|
  Projectile 3-momentum y-component (MeV)

pzv |doubleType|
  Projectile 3-momentum z-component (MeV)

.. Target

pdgt |intType|
  Target PDG code

Mt |doubleType|
  Target mass (MeV)

.. Ejectile

pdgl |intType|
  Ejectile PDG code

El |doubleType|
  Ejectile total energy (MeV)

KEl |doubleType|
  Ejectile kinetic energy (MeV)

pxl |doubleType|
  Ejectile 3-momentum x-component (MeV)

pyl |doubleType|
  Ejectile 3-momentum y-component (MeV)

pzl |doubleType|
  Ejectile 3-momentum z-component (MeV)

.. Residue

pdgr |intType|
  Residue PDG code

Er |doubleType|
  Residue total energy (MeV)

KEr |doubleType|
  Residue kinetic energy (MeV)

pxr |doubleType|
  Residue 3-momentum x-component (MeV)

pyr |doubleType|
  Residue 3-momentum y-component (MeV)

pzr |doubleType|
  Residue 3-momentum z-component (MeV)

.. Residue state before de-excitations

Ex |doubleType|
  Initial residue excitation energy (MeV)

twoJ |intType|
  Two times the initial residue spin

parity |intType|
  Initial residue parity

.. De-excitation products

np |intType|
  Number of de-excitation products

pdgp |intArrayType|
  De-excitation product PDG codes

Ep |doubleArrayType|
  De-excitation product total energies (MeV)

KEp |doubleArrayType|
  De-excitation product kinetic energies (MeV)

pxp |doubleArrayType|
  De-excitation product 3-momentum x-components (MeV)

pyp |doubleArrayType|
  De-excitation product 3-momentum y-components (MeV)

pzp |doubleArrayType|
  De-excitation product 3-momentum z-components (MeV)

.. Flux-averaged total cross section

.. |xsecTreeUnits| raw:: html

   10<sup>&minus;42</sup> cm<sup>2</sup> per atom

xsec |doubleType|
  Flux-averaged total cross section (|xsecTreeUnits|)

.. |genericReaction| raw:: html

   <p style="text-align: center;"> 𝑎 + 𝑏 → 𝑐 + 𝑑 .</p>
